const MIN_TRAY_PAPERS = 0
const MAX_TRAY_PAPERS = 3
range PAPER_TRAY_RANGE = 0..3

set Students = {student1, student2}
set Users = {Students, technician}

//Students and technicians do not carry out these actions seperately
set StudentRestrictedActions = {fill, acquireToRefill, cannotFill}
set TechnicianRestrictedActions = {acquireToPrint}

//Printer
PRINTER = PRINTER_IN_ACTION[MAX_TRAY_PAPERS],
PRINTER_IN_ACTION[papersInTray: PAPER_TRAY_RANGE] = 
										if (papersInTray > MIN_TRAY_PAPERS)//The tray contains paper
										then (acquireToPrint -> release -> PRINTER_IN_ACTION[papersInTray - 1]
												| acquireToRefill -> cannotFill -> release -> PRINTER_IN_ACTION[papersInTray])
										else //There is not enough paper in the printer 
											(acquireToRefill -> fill -> release -> PRINTER_IN_ACTION[MAX_TRAY_PAPERS]).

//Student
STUDENT(DOCUMENTS = 1) = USE_PRINTER[1],
USE_PRINTER[documentNo: 1..DOCUMENTS] = (acquireToPrint -> printDocument[documentNo] -> release ->
								if(documentNo + 1 <= DOCUMENTS) //If the student still has unfinished printing documents
								then USE_PRINTER[documentNo + 1] //Proceed to print their next paper using the printer
								else (terminate -> END)) + StudentRestrictedActions.

//Technician
TECHNICIAN = (acquireToRefill -> {fill, cannotFill} -> release -> TECHNICIAN | terminate -> END) + TechnicianRestrictedActions.
||PRINTING_SYSTEM = (student1: STUDENT(3) || student2: STUDENT(2) || technician: TECHNICIAN || Users :: PRINTER)
						/ {terminate / Users.terminate}.